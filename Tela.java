/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp.os.pkg2;

import java.awt.FlowLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.gnu.glpk.GLPK;
import org.gnu.glpk.GLPKConstants;
import org.gnu.glpk.SWIGTYPE_p_double;
import org.gnu.glpk.SWIGTYPE_p_int;
import org.gnu.glpk.glp_prob;
import org.gnu.glpk.glp_smcp;
import static tp.os.pkg2.TPOS2.write_lp_solution;

/**
 *
 * @author asus
 */
public class Tela extends javax.swing.JFrame {

    /**
     * Creates new form Tela
     */
    public String entrada;
    public static int varDec = 0, varRest = 0;
    
    public Tela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        SalvaNome = new javax.swing.JButton();
        Nome = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Quantos Tipos de Ração");

        SalvaNome.setText("Iniciar");
        SalvaNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SalvaNomeMouseClicked(evt);
            }
        });

        Nome.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        Nome.setValue(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(Nome, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(SalvaNome)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SalvaNome)
                    .addComponent(Nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void SalvaNomeMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // Criando problema
        glp_prob lp;
        glp_smcp parm;
        SWIGTYPE_p_int ind;
        SWIGTYPE_p_double val;
        int ret;
        varDec = Integer.parseInt(Nome.getValue().toString());
        SalvaNome.setEnabled(false);
        this.dispose();
        String [] decisoes = new String [varDec];
        lp = GLPK.glp_create_prob();
        GLPK.glp_set_prob_name(lp, "myProblem");
        for(int i=0; i < decisoes.length; i++){
        JFrame frame11 = new JFrame("");
            entrada = JOptionPane.showInputDialog(frame11, "Quais os tipos de racoes?\n" + 
                    "Insira um nome:");
            decisoes[i] = entrada;
        }
        // Definir limites das variaveis de decisao
        GLPK.glp_add_cols(lp, varDec);
        for (int i=1; i<=varDec; i++){
            GLPK.glp_set_col_name(lp, i, decisoes[i-1]);
            GLPK.glp_set_col_kind(lp, i, GLPKConstants.GLP_CV);
            double min = 0, max = 0;
            boolean varMin = false, varMax = false;
            JFrame frame1 = new JFrame("");
            entrada = JOptionPane.showInputDialog(frame1, "Qual o limite da raçao para " + decisoes[i-1] + " ?\n" + 
                    "Insira valor minimo:");
            //verifica se entrada valida
            while(varMin == false){
                try{
                    min = Double.parseDouble(entrada);
                    varMin = true;
                }catch(NumberFormatException e){
                    JFrame frame7 = new JFrame("");
                    entrada = JOptionPane.showInputDialog(frame7, "Entrada invalida\n" + 
                            "Insira valor minimo:");

                }
            }
            JFrame frame2 = new JFrame("");
            entrada = JOptionPane.showInputDialog(frame2, "Qual o limite da raçao para " + decisoes[i-1] + " ?\n" + 
                    "Insira valor maximo:");
            //verifica se entrada valida
            while(varMax == false){
                try{
                    max = Double.parseDouble(entrada);
                    varMax = true;
                }catch(NumberFormatException e){
                    JFrame frame7 = new JFrame("");
                    entrada = JOptionPane.showInputDialog(frame7, "Entrada invalida\n" + 
                             "Insira valor maximo:");
                }
        }
            GLPK.glp_set_col_bnds(lp, i, GLPKConstants.GLP_DB, min, max);
        }
        //Determina restriçoe
        String [] restricao = new String [2];
        restricao [0] = "Mao-de-Obra";
        restricao [1] = "Matéria Prima";
        GLPK.glp_add_rows(lp, 2); 
        //Definir limites das restriçoes
        for (int i=1; i<=2; i++){
            GLPK.glp_set_row_name(lp, i, restricao[i-1]);
            boolean minInf = false, maxInf = false;
            JFrame frame4 = new JFrame("");
            entrada = JOptionPane.showInputDialog(frame4, "Qual o limite da restricao " + restricao[i-1] + " ?\n" +
                    "Insira valor minimo:(se infinito, digite 'infinito')");
            double min = 0, max = 0;
            boolean minVal = false;
            //verifica se entrada de valor min e valida
            while(!entrada.equalsIgnoreCase("infinito") && minVal == false){
                try{
                    if(entrada.equalsIgnoreCase("infinito")){
                        minInf = true;
                        minVal = true;
                    }else{
                        min = Double.parseDouble(entrada);
                        minVal = true;
                    }
                }catch(NumberFormatException e){
                    JFrame frame5 = new JFrame("");
                    entrada = JOptionPane.showInputDialog(frame5, "Entrada invalida\n" + 
                            "Insira valor minimo:(se infinito, digite 'infinito')");
                }
            }
            JFrame frame8 = new JFrame("");
            entrada = JOptionPane.showInputDialog(frame8, "Qual o limite da restricao " + restricao[i-1] + " ?\n" +
                    "Insira valor maximo:(se infinito, digite 'infinito')");
            boolean maxVal = false;
            //verifica se entrada de valor max e valida
            while (!entrada.equalsIgnoreCase("infinito") && maxVal == false){
                try{
                    if(entrada.equalsIgnoreCase("infinito")){
                        maxInf = true;
                        maxVal = true;
                    }else{
                        max = Double.parseDouble(entrada);
                        maxVal = true;
                    }
                }catch(NumberFormatException e){
                    JFrame frame5 = new JFrame("");
                    entrada = JOptionPane.showInputDialog(frame5, "Entrada invalida\n" + 
                            "Insira valor maximo:(se infinito, digite 'infinito')");
                }
            }
            //Definir tipo de restriçao
            //restricao −∞ < x ≤ max
            if(minInf == true && maxInf == false){
                GLPK.glp_set_row_bnds(lp, i, GLPKConstants.GLP_UP, 0, max);
            }//restricao min ≤ x < +∞
            else if(minInf == false && maxInf == true){
                GLPK.glp_set_row_bnds(lp, i, GLPKConstants.GLP_LO, min, 0);
            }//restricao −∞ < x < +∞
            else if(minInf == true && maxInf == true){
                GLPK.glp_set_row_bnds(lp, i, GLPKConstants.GLP_FR, 0, 0);
            }//restriçao min ≤ x ≤ max
            else{
                GLPK.glp_set_row_bnds(lp, i, GLPKConstants.GLP_DB, min, max);
            }
        }
        ind = GLPK.new_intArray(varDec);
        val = GLPK.new_doubleArray(varDec);
        //entrada de coeficientes das variaveis nas restricoes
        for(int i=1; i<=2; i++){
            for(int j=1; j<=varDec; j++){
                GLPK.intArray_setitem(ind, j, j);
            }
            //definindo coeficientes para cada variavel na restriçao
            for(int c = 1; c <= varDec; c++){
                JFrame frame8 = new JFrame("");
                entrada = JOptionPane.showInputDialog(frame8, "Quanto de " + restricao[i-1] + 
                        " é gasto para " + decisoes[c-1] + " ?");
                boolean coefVal = false;
                double coeficiente = 0;
                //verifica se entrada valida
                while(coefVal == false){
                    try{
                            coeficiente = Double.parseDouble(entrada);
                            coefVal = true;
                    }catch(NumberFormatException e){
                            JFrame frame9 = new JFrame("");
                            entrada = JOptionPane.showInputDialog(frame9, "Entrada invalida\n" + 
                                    "Quanto de " + restricao[i-1] + " é gasto para " + decisoes[i-1] + " ?");
                    }
                }
                GLPK.doubleArray_setitem(val, c, coeficiente);
            }
            GLPK.glp_set_mat_row(lp, i, varDec, ind, val);
        }
        // Definir funcao objetiva de MAX ou MIN
        GLPK.glp_set_obj_name(lp, "z");
        JFrame frame9 = new JFrame("");
        entrada = JOptionPane.showInputDialog(frame9, "O Lucro visa maximizaçao ou minimizaçao ?");
        boolean foVal = false;
        while(foVal == false){
            if(entrada.equalsIgnoreCase("minimizaçao")){
                    foVal = true;
                    GLPK.glp_set_obj_dir(lp, GLPKConstants.GLP_MIN);
            }else if(entrada.equalsIgnoreCase("maximizaçao")){
                    foVal = true;
                    GLPK.glp_set_obj_dir(lp, GLPKConstants.GLP_MAX);
            }else{
                    JFrame frame10 = new JFrame("");
                    entrada = JOptionPane.showInputDialog(frame10, "Entrada invalida\n" + 
                            "O Lucro visa maximizaçao ou minimizaçao ?");
            }
        }
        //Definir coeficientes das variaveis de decisao na FO
        for(int i=1; i<=varDec; i++){
            JFrame frame10 = new JFrame("");
            entrada = JOptionPane.showInputDialog(frame10, "Insira o lucro das as racoes para a funcao do lucro:" + 
                    "Qual o lucro de " + decisoes[i-1] + " ?");
            boolean coefxVal = false;
            double coef = 0;
            while(coefxVal == false){
                try{
                    coef = Double.parseDouble(entrada);
                    coefxVal = true;
                }catch(NumberFormatException e){
                    JFrame frame11 = new JFrame("");
                    entrada = JOptionPane.showInputDialog(frame11, "Entrada invalida\n" + 
                            "Qual o lucro de " + decisoes[i-1] + " ?");
                }
            }
            GLPK.glp_set_obj_coef(lp, i, coef);
        }
        // Solucionar modelo
        parm = new glp_smcp();
        GLPK.glp_init_smcp(parm);
        ret = GLPK.glp_simplex(lp, parm);
        // Retornar solucao
        if (ret == 0) {
            write_lp_solution(lp);
        } else {
            System.out.println("O Problema nao pode ser resolvido");
        }
        // Free memory
        //GLPK.glp_write_lp(lp, null, "a.txt");
        GLPK.glp_delete_prob(lp);
        
        
    }                                      

    static void write_lp_solution(glp_prob lp) {
        JFrame frame = new JFrame("Resultado");
   
        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());
        int i;
        int n;
        String name;
        double val;
        name = GLPK.glp_get_obj_name(lp);
        val = GLPK.glp_get_obj_val(lp);
        
        JLabel label = new JLabel("Resultado: " + name + " = " + val + " \n");
        panel.add(label);
        frame.add(panel);
        n = GLPK.glp_get_num_cols(lp);
        for (i = 1; i <= n; i++) {
            name = GLPK.glp_get_col_name(lp, i);
            val = GLPK.glp_get_col_prim(lp, i);
            JLabel teste = new JLabel("Valor de: " + name + " = " + val + " \n");
            panel.add(teste);
            frame.add(panel);
            }
        frame.setSize((1+varDec)*100, (1+varDec)*100);
   
        frame.setLocationRelativeTo(null);
   
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
	}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JSpinner Nome;
    private javax.swing.JButton SalvaNome;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration                   
}
